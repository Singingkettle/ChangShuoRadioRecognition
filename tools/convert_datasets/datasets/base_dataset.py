import copy
import json
import os
import os.path as osp
import pickle
import shutil
from datetime import datetime

import numpy as np
from tqdm import tqdm


def save_seq(item, sequence_data_dir):
    # Save sequence data of In-phase/Quadrature
    iq_path = osp.join(sequence_data_dir, item['file_name'])
    np.save(iq_path, item['data'])


def combine_two_infos(annotations1, annotations2):
    combine_annotation = copy.deepcopy(annotations1)
    update_list = ['data_list']
    for key_name in update_list:
        combine_annotation[key_name].extend(copy.deepcopy(annotations2[key_name]))

    return combine_annotation


class BaseDataset:

    def __init__(self, organization, root_dir, version, data_ratios,
                 author='ShuoChang', email='changshuo@bupt.edu.cn', department='CitybusterLab'):
        self.organization = organization
        self.root_dir = root_dir
        self.version = version
        self.data_dir = osp.join(self.root_dir, self.organization, self.version)
        self.train_num = 0
        self.val_num = 0
        self.test_num = 0
        self.data_ratios = data_ratios
        self.data_name = ''
        self.author = author
        self.email = email
        self.department = department
        self.date = datetime.today().strftime('%Y-%m-%d')

    def _generate_new_info(self, modulations, snrs):
        new_annos = dict(
            metainfo=dict(
                modulations=modulations,
                snrs=snrs,
                author=self.author,
                department=self.department,
                date=self.date,
                email=self.email,
                data_prefix='iq'
            ),
            data_list=[]
        )

        return new_annos

    def preprocess_original_data(self):
        dataset = []
        infos = []

        return dataset, infos

    def generate(self):
        try:
            print('++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')
            dataset, infos = self.preprocess_original_data()
            sequence_data_dir = osp.join(self.data_dir, 'iq')

            for item in os.listdir(self.data_dir):
                if osp.isdir(osp.join(self.data_dir, item)):
                    shutil.rmtree(osp.join(self.data_dir, item))
                if item.endswith('json'):
                    os.remove(osp.join(self.data_dir, item))

            if osp.isdir(sequence_data_dir):
                shutil.rmtree(sequence_data_dir)
            os.makedirs(sequence_data_dir)

            # Save the item as *.npy file
            for item in tqdm(dataset, desc=f'\tSave data of {self.organization}-{self.version}'):
                save_seq(item, sequence_data_dir)

            for set_name in infos:
                self._generate(set_name, infos[set_name])

        except Exception as e:
            print('Error Message is: {}'.format(e))
            raise RuntimeError(
                'Converting data {}-{} failed'.format(self.organization, self.version))

    def _generate(self, set_name, set_info):
        print(f'\tSave {set_name} annotation json for the data set {self.version} generated by {self.organization}')
        json.dump(set_info, open(self.data_dir + f'/{set_name}.json', 'w'), indent=4, sort_keys=True)
        iq = []
        lookup_table = dict()
        idx = 0
        for annotation in tqdm(set_info['data_list'], desc=f'\tCache {set_name} data in dataset {self.data_name}!'):
            file_name = annotation['file_name']
            file_path = osp.join(self.data_dir, 'iq', file_name)
            data = np.load(file_path)
            data = data.astype(np.float32)
            iq.append(data)
            lookup_table[file_name] = idx
            idx += 1

        cache_data = dict()
        cache_data['iq'] = np.concatenate(iq, axis=0)
        cache_data['index'] = lookup_table

        cache_dir = osp.join(self.data_dir, 'cache')
        if not osp.isdir(cache_dir):
            os.makedirs(cache_dir)

        cache_file_path = osp.join(cache_dir, f'{set_name}_iq.pkl')
        pickle.dump(cache_data, open(cache_file_path, 'wb'), protocol=4)
