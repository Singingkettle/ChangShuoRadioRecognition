import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F

WEIGHT = [-4.40307966095978e-05, 3.55220846562976e-05, 5.3327272548099e-05, -5.09172658046946e-05,
          -6.19406094469038e-05, 6.98599085027123e-05, 6.92796247019914e-05, -9.25600655960612e-05,
          -7.46706694266166e-05, 0.000119148602663402, 7.73632839713587e-05, -0.000149660569338738,
          -7.65385753475107e-05, 0.000184018836182452, 7.13203990890055e-05, -0.00022201841367653,
          -6.07893690462999e-05, 0.000263311887344662, 4.39996552020005e-05, -0.000307396411107857,
          -1.99984631862405e-05, 0.000353602699038108, -1.21519787419025e-05, -0.000401086443136635,
          5.33501672584343e-05, 0.00044882256134549, -0.000104429114014579, -0.000495602645660887, 0.000166128548360685,
          0.000540035935178127, -0.000239065959795808, -0.000580554083656521, 0.000323706956793408,
          0.000615419926513101, -0.000420335459308944, -0.000642740379062719, 0.000529024272343114, 0.00066048351759235,
          -0.000649606605901809, -0.000666499808988529, 0.000781649111193734, 0.00065854736482453,
          -0.000924426992743102, -0.000634321003918311, 0.00107690173023619, 0.000591484815379788, -0.00123770190151069,
          -0.000527707824142552, 0.00140510753841766, 0.000440702275023806, -0.00157703836972269, -0.000328263971566752,
          0.00175104620917938, 0.000188314034316573, -0.00192431163173999, -1.89413816765687e-05, 0.00209364494566816,
          -0.000181554813163211, -0.00225549131173891, 0.000414623471997499, 0.00240593968064305, -0.000681421572430933,
          -0.0025407350128532, 0.000982776530006248, 0.00265529300644099, -0.00131915180141122, -0.0027447162798444,
          0.00169061648135663, 0.00280381062657045, -0.00209681962184455, -0.00282709955959727, 0.00253696994238307,
          0.00280883486840465, -0.00300982152400056, -0.00274300028167329, 0.00351366598981044, 0.00262330450459196,
          -0.00404633157183605, -0.0024431587920527, 0.00460518934962015, 0.00219563269143877, -0.0051871668228971,
          -0.00187337943045102, 0.00578876885061568, 0.00146851930564, -0.00640610585439182, -0.000972464817385352,
          0.00703492904871757, 0.000375664335213735, -0.00767067232570276, 0.000332769673438561, 0.00830850029157376,
          -0.00116559881487391, -0.00894336182834958, 0.00213824186964743, 0.00957004843971579, -0.00326992732505175,
          -0.0101832565376276, 0.00458541897044018, 0.0107776527378816, -0.00611765931107181, -0.011347941160825,
          0.00791193773776391, 0.011888931679229, -0.0100327010703486, -0.0123956080204874, 0.0125751756374621,
          0.0128631946156781, -0.0156862836259455, -0.0132872210941791, 0.0196048536164952, 0.0136635833495834,
          -0.0247456707713563, -0.013988600150273, 0.0318955490862999, 0.0142590643354399, -0.0427454547267,
          -0.0144722877233875, 0.0616996043482986, 0.0146261389620405, -0.104920727204425, -0.0147190736697749,
          0.317917714893965, 0.514755456199799, 0.317917714893965, -0.0147190736697749, -0.104920727204425,
          0.0146261389620405, 0.0616996043482986, -0.0144722877233875, -0.0427454547267, 0.0142590643354399,
          0.0318955490862999, -0.013988600150273, -0.0247456707713563, 0.0136635833495834, 0.0196048536164952,
          -0.0132872210941791, -0.0156862836259455, 0.0128631946156781, 0.0125751756374621, -0.0123956080204874,
          -0.0100327010703486, 0.011888931679229, 0.00791193773776391, -0.011347941160825, -0.00611765931107181,
          0.0107776527378816, 0.00458541897044018, -0.0101832565376276, -0.00326992732505175, 0.00957004843971579,
          0.00213824186964743, -0.00894336182834958, -0.00116559881487391, 0.00830850029157376, 0.000332769673438561,
          -0.00767067232570276, 0.000375664335213735, 0.00703492904871757, -0.000972464817385352, -0.00640610585439182,
          0.00146851930564, 0.00578876885061568, -0.00187337943045102, -0.0051871668228971, 0.00219563269143877,
          0.00460518934962015, -0.0024431587920527, -0.00404633157183605, 0.00262330450459196, 0.00351366598981044,
          -0.00274300028167329, -0.00300982152400056, 0.00280883486840465, 0.00253696994238307, -0.00282709955959727,
          -0.00209681962184455, 0.00280381062657045, 0.00169061648135663, -0.0027447162798444, -0.00131915180141122,
          0.00265529300644099, 0.000982776530006248, -0.0025407350128532, -0.000681421572430933, 0.00240593968064305,
          0.000414623471997499, -0.00225549131173891, -0.000181554813163211, 0.00209364494566816, -1.89413816765687e-05,
          -0.00192431163173999, 0.000188314034316573, 0.00175104620917938, -0.000328263971566752, -0.00157703836972269,
          0.000440702275023806, 0.00140510753841766, -0.000527707824142552, -0.00123770190151069, 0.000591484815379788,
          0.00107690173023619, -0.000634321003918311, -0.000924426992743102, 0.00065854736482453, 0.000781649111193734,
          -0.000666499808988529, -0.000649606605901809, 0.00066048351759235, 0.000529024272343114,
          -0.000642740379062719, -0.000420335459308944, 0.000615419926513101, 0.000323706956793408,
          -0.000580554083656521, -0.000239065959795808, 0.000540035935178127, 0.000166128548360685,
          -0.000495602645660887, -0.000104429114014579, 0.00044882256134549, 5.33501672584343e-05,
          -0.000401086443136635, -1.21519787419025e-05, 0.000353602699038108, -1.99984631862405e-05,
          -0.000307396411107857, 4.39996552020005e-05, 0.000263311887344662, -6.07893690462999e-05,
          -0.00022201841367653, 7.13203990890055e-05, 0.000184018836182452, -7.65385753475107e-05,
          -0.000149660569338738, 7.73632839713587e-05, 0.000119148602663402, -7.46706694266166e-05,
          -9.25600655960612e-05, 6.92796247019914e-05, 6.98599085027123e-05, -6.19406094469038e-05,
          -5.09172658046946e-05, 5.3327272548099e-05, 3.55220846562976e-05, -4.40307966095978e-05
          ]


class LowPassFilter(nn.Module):
    def __init__(self, weight=None):
        super(LowPassFilter).__init__()
        if weight is None:
            weight = WEIGHT
        weight = np.array(weight, dtype=np.float32)
        weight = np.reshape(weight, [1, 1, 247])
        self.weight = torch.from_numpy(weight)
        self.weight.requires_grad = False

    def forward(self, x):
        weight = x.new_tensor(self.weight)
        x = F.pad(x, (123, 123))
        x = F.conv1d(x, weight)

        return x


a = LowPassFilter(WEIGHT)
x = torch.randn(20, 2, 4096)
b = a(x)
c = 1
